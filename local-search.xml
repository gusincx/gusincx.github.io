<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>datawhale-动手学数据分析-task01</title>
    <link href="/2021/09/15/datawhale-hands-on-data-analysis-master/"/>
    <url>/2021/09/15/datawhale-hands-on-data-analysis-master/</url>
    
    <content type="html"><![CDATA[<p> datawhale-动手学数据分析第一章</p><span id="more"></span><h2 id="包导入"><a href="#包导入" class="headerlink" title="包导入"></a>包导入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import 包 as 别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="载入数据"><a href="#载入数据" class="headerlink" title="载入数据"></a>载入数据</h2><h3 id="使用相对路径载入数据"><a href="#使用相对路径载入数据" class="headerlink" title="使用相对路径载入数据"></a>使用相对路径载入数据</h3><h3 id="使用绝对路径载入数据"><a href="#使用绝对路径载入数据" class="headerlink" title="使用绝对路径载入数据"></a>使用绝对路径载入数据</h3><p>df &#x3D; pd.read_csv(‘D:&#x2F;Projects&#x2F;PythonProjects&#x2F;Titanic&#x2F;titanicData&#x2F;train.csv’)</p>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Data analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>datawhale</tag>
      
      <tag>动手学数据分析，学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高等数学-第一章 函数与极限</title>
    <link href="/2021/07/27/AdvancedMathematics-xxzh-01/"/>
    <url>/2021/07/27/AdvancedMathematics-xxzh-01/</url>
    
    <content type="html"><![CDATA[<h1 id="映射与函数"><a href="#映射与函数" class="headerlink" title="映射与函数"></a>映射与函数</h1><h2 id="映射与函数-1"><a href="#映射与函数-1" class="headerlink" title="映射与函数"></a>映射与函数</h2><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>具有某种特定性质的事物的总体称为<code>集合</code></li><li>组成集合的事务称为<code>元素</code></li><li>不含任何元素的集合称为<code>空集</code>,记作<code>ø</code></li><li>元素a属于集合M,记作<code>a∈M</code></li><li>元素a不属于集合M,记作<code>a∉M</code></li></ul><h3 id="集合的表示方法"><a href="#集合的表示方法" class="headerlink" title="集合的表示方法"></a>集合的表示方法</h3><ul><li>列举法:按某种方式列出集合中的的全体元素<br>例:<br>有限集合 A &#x3D; {a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,….,a<sub>n</sub>}</li></ul><h1 id="数列的极限"><a href="#数列的极限" class="headerlink" title="数列的极限"></a>数列的极限</h1><h1 id="函数的极限"><a href="#函数的极限" class="headerlink" title="函数的极限"></a>函数的极限</h1><h1 id="无穷小与无穷大"><a href="#无穷小与无穷大" class="headerlink" title="无穷小与无穷大"></a>无穷小与无穷大</h1><h1 id="极限运算法则"><a href="#极限运算法则" class="headerlink" title="极限运算法则"></a>极限运算法则</h1><h1 id="极限存在法则-两个重要的极限"><a href="#极限存在法则-两个重要的极限" class="headerlink" title="极限存在法则 两个重要的极限"></a>极限存在法则 两个重要的极限</h1><h1 id="无穷小的比较"><a href="#无穷小的比较" class="headerlink" title="无穷小的比较"></a>无穷小的比较</h1><h1 id="函数的连续性与间断点"><a href="#函数的连续性与间断点" class="headerlink" title="函数的连续性与间断点"></a>函数的连续性与间断点</h1><h1 id="连续函数的运算与初等函数的连续性"><a href="#连续函数的运算与初等函数的连续性" class="headerlink" title="连续函数的运算与初等函数的连续性"></a>连续函数的运算与初等函数的连续性</h1><h1 id="闭区间上连续函数的性质"><a href="#闭区间上连续函数的性质" class="headerlink" title="闭区间上连续函数的性质"></a>闭区间上连续函数的性质</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>高等数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>徐小湛</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot02:配置文件</title>
    <link href="/2021/06/13/SpringBoot02/"/>
    <url>/2021/06/13/SpringBoot02/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot的配置"><a href="#SpringBoot的配置" class="headerlink" title="SpringBoot的配置"></a>SpringBoot的配置</h1><h2 id="配置文件的分类"><a href="#配置文件的分类" class="headerlink" title="配置文件的分类"></a>配置文件的分类</h2><p>SpringBoot是基于约定的，所以很多配置都有默认值,但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</p><p>SpringBoot默认会从Resources目录下加载application.properties或application.yml（application.yaml）文件</p><ul><li>properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&gt;</span> <span class="string">server.port=8081</span></span><br></pre></td></tr></table></figure></li><li>yml(yaml)<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="加载优先级"><a href="#加载优先级" class="headerlink" title="加载优先级"></a>加载优先级</h2><p>若Resources目录下<code>application.properties</code>,<code>application.yml</code>,<code>application.yaml</code>三个文件同时存在，<br>将会以<code>properties</code>&gt;<code>yml</code>&gt;<code>yaml</code>的优先级进行加载，低优先级配置文件若存在与高优先级配置文件相同的属性则会被忽略，若低优先级配置文件中的属性若在高优先级配置文件中没有则会被识别</p><blockquote><p>application.properties</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">name1:</span> <span class="string">abc</span></span><br></pre></td></tr></table></figure><blockquote><p>application.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">name1:</span> <span class="string">abc1</span></span><br><span class="line"><span class="attr">name2:</span> <span class="string">abc2</span></span><br></pre></td></tr></table></figure><ul><li>最终端口号将为<code>8081</code></li><li><code>application.yml</code>中的<code>name1: abc</code>会被识别</li><li><code>application.yaml</code>中的<code>name2: abc2</code>会被识别,<code>name1: abc1</code>会被忽略</li></ul><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><p>YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式，YAML是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C&#x2F;C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是以数据为核心的，比传统的xml方式更加简洁</p><p>YML文件的扩展名可以使用.yml或者.yaml</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>大小写敏感</li><li>数值前面（冒号后面）必须有空格作为分隔符（以冒号结尾不需要空格，表示文件路径的模版可以不需要空格）</li><li>使用固定的缩进风格表示层级关系，不要使用TAB(不同IDE中TAB对应的空格目数不同，会导致层级混乱)</li><li><code>#</code>表示注释</li></ul><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><h4 id="对象（map）：键值对的集合"><a href="#对象（map）：键值对的集合" class="headerlink" title="对象（map）：键值对的集合"></a>对象（map）：键值对的集合</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##行内写法</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>&#125;  </span><br></pre></td></tr></table></figure><h4 id="数组：一嘴按次序排列的值"><a href="#数组：一嘴按次序排列的值" class="headerlink" title="数组：一嘴按次序排列的值"></a>数组：一嘴按次序排列的值</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">address:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##行内写法  </span></span><br><span class="line"><span class="attr">address:</span> [<span class="string">beijing</span>,<span class="string">shanghai</span>]</span><br></pre></td></tr></table></figure><h4 id="纯量：单个的、不可再分的值"><a href="#纯量：单个的、不可再分的值" class="headerlink" title="纯量：单个的、不可再分的值"></a>纯量：单个的、不可再分的值</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n world&#x27;</span> <span class="comment"># 单引忽略转义字符,原样输出</span></span><br><span class="line"><span class="attr">msg1:</span> <span class="string">&quot;hello \n world&quot;</span> <span class="comment"># 双引识别转义字符</span></span><br></pre></td></tr></table></figure><h4 id="参数引用"><a href="#参数引用" class="headerlink" title="参数引用"></a>参数引用</h4><p> 引用上边定义的值</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">$&#123;name&#125;</span> <span class="comment"># 引用上边定义的name值</span></span><br></pre></td></tr></table></figure><h2 id="读取配置内容"><a href="#读取配置内容" class="headerlink" title="读取配置内容"></a>读取配置内容</h2><ul><li>配置内容<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">###对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###数组</span></span><br><span class="line"><span class="attr">address:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 纯量</span></span><br><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n world&#x27;</span> <span class="comment"># 单引忽略转义字符,原样输出</span></span><br><span class="line"><span class="attr">msg1:</span> <span class="string">&quot;hello \n world&quot;</span> <span class="comment"># 双引识别转义字符  </span></span><br><span class="line"><span class="comment">#### 参数引用</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">person1:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">$&#123;name&#125;</span> <span class="comment"># 引用上边定义的name值</span></span><br></pre></td></tr></table></figure><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3></li></ul><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot01:准备工作</title>
    <link href="/2021/06/12/SpringBoot01/"/>
    <url>/2021/06/12/SpringBoot01/</url>
    
    <content type="html"><![CDATA[<h1 id="快速生成SpringBoot"><a href="#快速生成SpringBoot" class="headerlink" title="快速生成SpringBoot"></a>快速生成SpringBoot</h1><h2 id="网页配置"><a href="#网页配置" class="headerlink" title="网页配置"></a>网页配置</h2><p><a href="https://start.spring.io/">https://start.spring.io/</a></p><p><img src="/img/img_SpringBoot01_01.png" alt="基础配置"></p><ul><li>选择<code>Generate</code>生成下载</li><li>解压后打开IDEA -&gt; <code>import project</code> </li><li>导入maven项目</li></ul><h2 id="IDEA创建SpringBoot项目"><a href="#IDEA创建SpringBoot项目" class="headerlink" title="IDEA创建SpringBoot项目"></a>IDEA创建SpringBoot项目</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><ul><li>File -&gt; new  project -&gt; Spring Initializr</li><li>配置阿里云spring源</li><li><a href="https://start.aliyun.com/">https://start.aliyun.com/</a><br><img src="/img/img_SpringBoot01_02.png" alt="基础配置"></li></ul><h3 id="配置项目信息"><a href="#配置项目信息" class="headerlink" title="配置项目信息"></a>配置项目信息</h3><p><img src="/img/img_SpringBoot01_03.png" alt="基础配置"></p><h3 id="配置依赖包"><a href="#配置依赖包" class="headerlink" title="配置依赖包"></a>配置依赖包</h3><p><img src="/img/img_SpringBoot01_04.png" alt="基础配置"><br>包和主目录同级</p><h2 id="改端口号"><a href="#改端口号" class="headerlink" title="改端口号"></a>改端口号</h2>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring01:创建Spring项目</title>
    <link href="/2021/06/08/Spring01/"/>
    <url>/2021/06/08/Spring01/</url>
    
    <content type="html"><![CDATA[<h1 id="创建Spring项目"><a href="#创建Spring项目" class="headerlink" title="创建Spring项目"></a>创建Spring项目</h1><h2 id="File-gt-new-project-gt-Spring"><a href="#File-gt-new-project-gt-Spring" class="headerlink" title="File -&gt; new  project -&gt; Spring"></a><code>File -&gt; new  project -&gt; Spring</code></h2><p><img src="/img/img_Spring01_01.png" alt="创建项目"></p><h2 id="若创建时未选择Create-empty-spring-config-xml"><a href="#若创建时未选择Create-empty-spring-config-xml" class="headerlink" title="若创建时未选择Create empty spring-config.xml"></a>若创建时未选择<code>Create empty spring-config.xml</code></h2><p><img src="/img/img_Spring01_02.png" alt="后续添加spring-config.xml"></p><h3 id="配置依赖包"><a href="#配置依赖包" class="headerlink" title="配置依赖包"></a>配置依赖包</h3><p><img src="/img/img_SpringBoot00_04.png" alt="基础配置"><br>包和主目录同级</p><h2 id="改端口号"><a href="#改端口号" class="headerlink" title="改端口号"></a>改端口号</h2>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git_01</title>
    <link href="/2021/05/22/Git-01/"/>
    <url>/2021/05/22/Git-01/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：方法</p><span id="more"></span><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><ul><li>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li><li><a href="https://git-scm.com/">https://git-scm.com/</a></li><li>git可分为两种方式<ul><li>图形化操作：Git-GUI</li><li>命令行操作：Git-Bash</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_09:反射</title>
    <link href="/2021/05/22/JavaBase-09/"/>
    <url>/2021/05/22/JavaBase-09/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：方法</p><span id="more"></span><p>.</p>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解计算机系统:目录</title>
    <link href="/2021/05/07/CSAPP-01/"/>
    <url>/2021/05/07/CSAPP-01/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://wdxtub.com/csapp/thin-csapp-0/2016/04/16/">读薄 CSAPP</a><br><a href="http://www.cs.cmu.edu/~./213/schedule.html">CSAPP视频课对应章节</a><br><a href="https://www.bilibili.com/video/BV1iW411d7hd">【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统 课程视频</a><br><a href="https://www.zhihu.com/question/20402534">知乎:如何阅读《深入理解计算机系统》这本书？</a></p>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>CASPP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>CASPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>草稿</title>
    <link href="/2021/05/07/%E8%8D%89%E7%A8%BF/"/>
    <url>/2021/05/07/%E8%8D%89%E7%A8%BF/</url>
    
    <content type="html"><![CDATA[<p>ARTS 1<br>2020.12.28<br>A Algorithm，每周至少做一道 Leetcode</p><p>R Review，阅读并点评至少一篇英文文章</p><p>W Watch，每周至少看一个TED，并简要总结</p><p>T Tips，学习至少一个技术技巧</p><p>S Share，分享一篇有观点和思考的技术文章</p><p>记录自己的学习笔记</p>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
      <category>Draft</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>CASPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_08:方法</title>
    <link href="/2021/05/04/JavaBase-08/"/>
    <url>/2021/05/04/JavaBase-08/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：方法</p><span id="more"></span><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><strong>用来完成特定功能的代码片段</strong><br>在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程</p><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><ul><li>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：<ul><li>修饰符：修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li><li>返回值类型 ：方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字void。</li><li>方法名：是方法的实际名称。方法名和参数表共同构成方法签名。</li><li>参数类型：参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li><li>方法体：方法体包含具体的语句，定义该方法的功能。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/img_JavaBase08_01.png" alt="方法的定义"></p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p><h3 id="非静态方法"><a href="#非静态方法" class="headerlink" title="非静态方法"></a>非静态方法</h3><p>非静态方法就是没有 static 修饰的方法，对于非静态方法的调用，是通过对 象来调用的，表现形式如下。</p><blockquote><p>对象名.方法（）</p></blockquote><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeMethod</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">InvokeMethod</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokeMethod</span>();</span><br><span class="line">        in.t1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printfln(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h3><p>静态方法就是用 static 修饰的方法，静态方法的调用是通过类名来调用的， 表现形式如下：</p><blockquote><p>类名.方法()</p></blockquote><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeMethod</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        InvokeMethod.t2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static t2....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法与方法之间的调用"><a href="#方法与方法之间的调用" class="headerlink" title="方法与方法之间的调用"></a>方法与方法之间的调用</h2><p>方法与方法之间的调用，主要是在一个方法内部如何调用其他方法。</p><h3 id="静态方法内部调用其他方法"><a href="#静态方法内部调用其他方法" class="headerlink" title="静态方法内部调用其他方法"></a>静态方法内部调用其他方法</h3><p>如果在本类当中，静态方法可以直接调用静态方法，<br>除了在 main 方法中，还可以在自定义的静态方法中直接调用。<br>如果在本类当中是非静态方法，就必须通过对象来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeMethod</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        t2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static t2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//静态方法调用非静态方法需通过对象来调用</span></span><br><span class="line">        <span class="comment">//InvokeMethod in =new InvokeMethod();</span></span><br><span class="line">        <span class="comment">//in.t2();</span></span><br><span class="line">        t2();</span><br><span class="line">        System.out.println(<span class="string">&quot;static t1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不在一个类当中，静态方法调用其他类中的静态方法，必须通过</p><blockquote><p>类名.静态方法（）；</p></blockquote><p>如果在不同类当中，静态方法调用其他类的非静态方法，需要导入该类中的包，以及通过创建对象调用。</p><h3 id="非静态方法内部调用"><a href="#非静态方法内部调用" class="headerlink" title="非静态方法内部调用"></a>非静态方法内部调用</h3><p>如果在本类中，非静态方法可以直接调用静态方法与非静态方法。<br>在不同类中，非静态方法调用其他类的静态方法，需要通过导入该类中的包，并且需要通过类名来调用<br>在不用类中，非静态方法调用其他类的非静态方法时，需要导入该类中的包，还需要通过创建对象来调用。</p><h2 id="实参与形参"><a href="#实参与形参" class="headerlink" title="实参与形参"></a>实参与形参</h2><ul><li>形式参数：在定义函数名和函数体时使用的参数，目的是用来接收调用该函数时传入的参数</li><li>实际参数：在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为”实际参数:<h2 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h2>值传递和引用传递主要是看数据类型：参数为基本类型时是值传递， 参数为封装类型时是引用传递</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_07:循环结构</title>
    <link href="/2021/05/03/JavaBase-07/"/>
    <url>/2021/05/03/JavaBase-07/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：循环结构</p><span id="more"></span><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><ul><li>判断是否满足条件，为true则进入循环执行语句，为false则跳出循环</li><li>条件判断为true时，循环会一直执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件判断)&#123;</span><br><span class="line">    <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h1><ul><li>先执行一次语句，再做循环条件判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断);</span><br></pre></td></tr></table></figure><ul><li>while是先判断后执行，do…while 是先执行后判断</li></ul><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><ul><li>当满足条件的时候，会执行重复执行的循环体 ，如果一旦判断不满足,就结束循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(条件初始化;条件判断;条件迭代)&#123;</span><br><span class="line">重复执行的语句;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">- 死循环</span><br><span class="line"></span><br><span class="line">```JAVA</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">  <span class="keyword">for</span>( ; ; )&#123;</span><br><span class="line">重复执行的语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以迭代数组和集合，取出其中的元素。<ul><li>只适合取数据，不能更改数据</li><li>只用于数组，或实现Iterable接口的集合类上；set，list</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *增强for</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">     System.out.println(num);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="break-关键字"><a href="#break-关键字" class="headerlink" title="break 关键字"></a>break 关键字</h1><ul><li>break 主要用在循环语句或者 switch 语句中，用来中止循环,跳出整个语句块。</li></ul><pre><code class="java">public static void main(String[] args) &#123;        int [] numbers = &#123;10, 20, 30, 40, 50&#125;;        for(int x : numbers ) &#123;            if( x == 30 ) &#123;                break;            &#125;            System.out.println( x );        &#125;    &#125;  </code></pre><blockquote><p>输出结果<br>10<br>20</p></blockquote><h1 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h1><ul><li>continue 适用于任何循环控制结构中。作用是让程序立刻跳出本次循环，跳到下一次循环的迭代,并不是中止循环。<ul><li>在 for 循环中，continue 语句使程序立即跳转到更新语句。</li><li>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</li></ul></li></ul><pre><code class="java">public static void main(String[] args) &#123;        int [] numbers = &#123;10, 20, 30, 40, 50&#125;;        for(int x : numbers ) &#123;            if( x == 30 ) &#123;                continue;            &#125;            System.out.println( x );        &#125;    &#125;  </code></pre><blockquote><p>输出结果<br>10<br>20<br>40<br>50</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_06:选择结构</title>
    <link href="/2021/05/03/JavaBase-06/"/>
    <url>/2021/05/03/JavaBase-06/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：选择结构</p><span id="more"></span><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="单选择结构"><a href="#单选择结构" class="headerlink" title="单选择结构"></a>单选择结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">        Start([Start]) ==&gt;id1&#123;布尔表达式&#125;</span><br><span class="line">        id1==True==&gt;id2[执行语句]</span><br><span class="line">        id2 ==&gt;End([End])</span><br><span class="line">        id1==False==&gt;End</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>&#123;布尔表达式&#125;(</span><br><span class="line">    <span class="comment">//如果为true将执行的语句</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="双选择结构"><a href="#双选择结构" class="headerlink" title="双选择结构"></a>双选择结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">graph TB</span><br><span class="line">        Start([Start]) ==&gt;id1&#123;布尔表达式&#125;</span><br><span class="line">        id1==True==&gt;id2[执行语句1]</span><br><span class="line">        id1==False==&gt;id3[执行语句2]</span><br><span class="line">        id2 ==&gt;End([End])</span><br><span class="line">        id3 ==&gt;End([End])</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>&#123;布尔表达式&#125;(</span><br><span class="line">    <span class="comment">//如果为true将执行的语句</span></span><br><span class="line">)<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果为false将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多选择结构"><a href="#多选择结构" class="headerlink" title="多选择结构"></a>多选择结构</h3><p><img src="/img/img_JavaBase06_01.png" alt="多选择结构"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式1为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式2为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式3为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式4为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果所有布尔表达式都为false将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套if选择结构"><a href="#嵌套if选择结构" class="headerlink" title="嵌套if选择结构"></a>嵌套if选择结构</h3><p><img src="/img/img_JavaBase06_02.png" alt="多选择结构"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式1和布尔表达式2为true,同时满足将执行的语句</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式1为true和布尔表达式2为false,同时满足将执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式1和布尔表达式2为false,同时满足将执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><ul><li>判断一个变量与一系列值中某个值是否相等，若相等则执行对应语句。每个值称为一个分支</li><li>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</li><li>如果 case 语句块中没有 break 语句时，并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。</li><li>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。</li></ul><p><a href="https://www.runoob.com/java/java-switch-case.html">switch case语句</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">    <span class="comment">//执行语句1</span></span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">//跳出 switch 语句，可选</span></span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">    <span class="comment">//执行语句2</span></span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">//跳出 switch 语句，可选</span></span><br><span class="line">    <span class="keyword">case</span> value3:</span><br><span class="line">    <span class="comment">//执行语句3</span></span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">//跳出 switch 语句，可选</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选，default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</span></span><br><span class="line">    <span class="comment">//执行语句4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_05:Scanner</title>
    <link href="/2021/05/03/JavaBase-05/"/>
    <url>/2021/05/03/JavaBase-05/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：Scanner</p><span id="more"></span><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><h1 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br></pre></td></tr></table></figure><h2 id="获取输入数据"><a href="#获取输入数据" class="headerlink" title="获取输入数据"></a>获取输入数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sc.next();<span class="comment">//读取到空白符就结束获取（剔除之前的空白符，并舍弃再一次遇到空白符之后的数据）</span></span><br><span class="line">sc.nextLine();<span class="comment">//读取整行数据，遇到&quot;\n&quot;就结束获取</span></span><br><span class="line">sc.nextInt();<span class="comment">//只能接受整型数据,空格/回车/制表符结束</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>返回值</th><th>开始读取字符(包括此字符)</th><th>停止读取字符(不包括此字符)</th><th>光标位置</th></tr></thead><tbody><tr><td>next()</td><td>String</td><td>String</td><td>空格&#x2F;回车&#x2F;制表符</td><td>仍在本行</td></tr><tr><td>nextXxx()</td><td>基本数据类型xxx</td><td>xxx</td><td>空格&#x2F;回车&#x2F;制表符</td><td>仍在本行</td></tr><tr><td>nextLine()</td><td>String</td><td>任意字符</td><td>回车</td><td>移动到下一行起始位置</td></tr></tbody></table><ul><li>判断是否还有输入的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sc.hasNextInt();<span class="comment">//扫描是否有Int型值，有着返回ture,若非Int类型则退出</span></span><br><span class="line">sc.hasNext();<span class="comment">//扫描是否有非空字符,如果有,则返回true,否则方法阻塞，等待输入内容然后继续扫描。</span></span><br><span class="line">sc.hasNextLine();<span class="comment">// 根据行匹配模式去扫描是否有值(包括空行),如果有,则返回true,否则方法阻塞，等待输入内容然后继续扫描。</span></span><br></pre></td></tr></table></figure><h2 id="判断输入数据"><a href="#判断输入数据" class="headerlink" title="判断输入数据"></a>判断输入数据</h2><ul><li>hasNextInt()<ul><li>判断是否有Int型值，有着返回ture,若非Int类型则返回false</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNextInt</span><span class="params">(<span class="type">int</span> radix)</span> &#123;</span><br><span class="line">        setRadix(radix);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> hasNext(integerPattern());</span><br><span class="line">        <span class="keyword">if</span> (result) &#123; <span class="comment">// Cache it</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (matcher.group(SIMPLE_GROUP_INDEX) == <span class="literal">null</span>) ?</span><br><span class="line">                    processIntegerToken(hasNextResult) :</span><br><span class="line">                    hasNextResult;</span><br><span class="line">                typeCache = Integer.parseInt(s, radix);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">                result = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>hasNextLine()<ul><li>会根据行匹配模式去判断接下来是否有一行(包括空行)。如果有,则返回true,否则方法阻塞，等待输入内容然后继续扫描</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNextLine</span><span class="params">()</span> &#123;</span><br><span class="line">        saveState();</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> findWithinHorizon(linePattern(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">MatchResult</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="built_in">this</span>.match();</span><br><span class="line">            <span class="type">String</span> <span class="variable">lineSep</span> <span class="operator">=</span> mr.group(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (lineSep != <span class="literal">null</span>) &#123;</span><br><span class="line">                result = result.substring(<span class="number">0</span>, result.length() -</span><br><span class="line">                                          lineSep.length());</span><br><span class="line">                cacheResult(result);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cacheResult();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        revertState();</span><br><span class="line">        <span class="keyword">return</span> (result != <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li>hasNext();<ul><li>先扫描缓冲区中是否有字符，有则返回true,继续扫描。直到扫描为空，这时并不返回false,而是将方法阻塞，等待输入内容然后继续扫描</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">    ensureOpen();</span><br><span class="line">    saveState();</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">while</span> (!sourceClosed) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasTokenInBuffer()) &#123;</span><br><span class="line">            <span class="keyword">return</span> revertState(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        readInput();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> hasTokenInBuffer();</span><br><span class="line">    <span class="keyword">return</span> revertState(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/gao_zhennan/article/details/80562548">Scanner中hasNext()方法阻塞的解决方法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入若干单词，以空格作为分隔&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(!sc.hasNext(<span class="string">&quot;#&quot;</span>))  <span class="comment">//匹配#返回true,然后取非运算。即以#为结束符号</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;键盘输入的内容是：&quot;</span>+ sc.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">        sc.close();<span class="comment">//属于io流的类不关闭会一直占用资源，使用完后需要关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hasNextDouble()方法的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNextDouble())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">            m++;</span><br><span class="line">            sum += x;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入了第&quot;</span>+m+<span class="string">&quot;个数,当前sum=&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入了&quot;</span>+m+<span class="string">&quot;个数,sum=&quot;</span>+sum);</span><br><span class="line">        System.out.println(+m+<span class="string">&quot;个数的平均值为&quot;</span>+sum/m);</span><br><span class="line">        sc.close();<span class="comment">//属于io流的类不关闭会一直占用资源，使用完后需要关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_04:运算符</title>
    <link href="/2021/05/02/JavaBase-04/"/>
    <url>/2021/05/02/JavaBase-04/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：运算符</p><span id="more"></span><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>算术运算符：<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>++</code>,<code>--</code></li><li>赋值运算符:<code>=</code></li><li>关系运算符:<code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>==</code>,<code>!=</code>,<code>instanceof</code></li><li>逻辑运算符:<code>&amp;&amp;</code>,<code>||</code>,<code>!</code></li><li>位运算符:<code>&amp;</code>,<code>|</code>,<code>^</code>,<code>~</code>,<code>&gt;&gt;</code>,<code>&lt;&lt;</code>,<code>&gt;&gt;&gt;</code></li><li>条件运算符:<code>?:</code></li><li>扩展赋值运算符:<code>+=</code>,<code>-=</code>,<code>*=</code>,<code>/=</code></li></ul><table><thead><tr><th>优先级</th><th>运算符</th><th>简介</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>[ ]、 .、 ( )</td><td>方法调用，属性获取</td><td>从左向右</td></tr><tr><td>2</td><td>!、~、 ++、 –</td><td>一元运算符</td><td>从右向左</td></tr><tr><td>3</td><td>* 、&#x2F; 、%</td><td>乘、除、取模（余数）</td><td>从左向右</td></tr><tr><td>4</td><td>+ 、 -</td><td>加减法</td><td>从左向右</td></tr><tr><td>5</td><td>&lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;</td><td>左位移、右位移、无符号右移</td><td>从左向右</td></tr><tr><td>6</td><td>&lt; 、&lt;&#x3D; 、&gt;、 &gt;&#x3D;、 instanceof</td><td>小于、小于等于、大于、大于等于，对象类型判断是否属于同类型</td><td>从左向右</td></tr><tr><td>7</td><td>&#x3D;&#x3D; 、!&#x3D;</td><td>2个值是否相等，2个值是否不等于。下面有详细的解释</td><td>从左向右</td></tr><tr><td>8</td><td>&amp;</td><td>按位与</td><td>从左向右</td></tr><tr><td>9</td><td>^</td><td>按位异或</td><td>从左向右</td></tr><tr><td>10</td><td>|</td><td>按位或</td><td>从左向右</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>短路与</td><td>从左向右</td></tr><tr><td>12</td><td>||</td><td>短路或</td><td>从左向右</td></tr><tr><td>13</td><td>?:</td><td>条件运算符</td><td>从右向左</td></tr><tr><td>14</td><td>&#x3D;、 +&#x3D; 、-&#x3D; 、*&#x3D; 、&#x2F;&#x3D;、 %&#x3D;、 &amp;&#x3D;、 |&#x3D;、 ^&#x3D;、 &lt;、&lt;&#x3D; 、&gt;、&gt;&#x3D; 、&gt;&gt;&#x3D;</td><td>混合赋值运算符</td><td>从右向左</td></tr></tbody></table><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><strong>基础运算符<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">45</span>;</span><br><span class="line">System.out.println(a+b);            <span class="comment">//加法运算，输出为30</span></span><br><span class="line">System.out.println(a-b);            <span class="comment">//减法运算，输出为-10</span></span><br><span class="line">System.out.println(a*b);            <span class="comment">//乘法运算，输出为200</span></span><br><span class="line">System.out.println(a/b);            <span class="comment">//除法运算，输出为0（int型直接舍弃小数）</span></span><br><span class="line">System.out.println(a/(<span class="type">double</span>)b);    <span class="comment">//除法运算，强转为double型再进行计算，输出为0.5</span></span><br><span class="line">System.out.println(e%d);            <span class="comment">//模（取余）运算，计算出无法整除的数，输出为5</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">**自增`++`,自减`--`**</span><br><span class="line">```java</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//定义int型变量a，赋值为1</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">//输出为a的值1</span></span><br><span class="line">System.out.println(a++);</span><br><span class="line"><span class="comment">//先执行语句，将a的值&#x27;1&#x27;输出；再将a进行自增，a的值自增后为&#x27;2&#x27;</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">//输出a此时的值&#x27;2&#x27;</span></span><br><span class="line">System.out.println(++a);</span><br><span class="line"><span class="comment">//先将a进行自增，得出值为3；再执行语句，将a的值输出，输出值为&#x27;3&#x27;</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">//输出a此时的值&#x27;3&#x27;</span></span><br><span class="line">System.out.println(a--);</span><br><span class="line"><span class="comment">//先执行语句，将a的值&#x27;3&#x27;输出；再将a进行自减，a的值自增后为&#x27;2&#x27;</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">//输出a此时的值&#x27;2&#x27;</span></span><br><span class="line">System.out.println(--a);</span><br><span class="line"><span class="comment">//先将a进行自增，得出值为1；再执行语句，将a的值输出，输出值为&#x27;1&#x27;</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">//输出a此时的值&#x27;1&#x27;</span></span><br><span class="line">```    </span><br><span class="line">## 赋值运算符</span><br><span class="line">```java</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(a);<span class="comment">//输出结果为1;</span></span><br><span class="line">System.out.println(b);<span class="comment">//输出为2;</span></span><br><span class="line">b = a;<span class="comment">//将a的值赋给b</span></span><br><span class="line">System.out.println(b);<span class="comment">//输出为1</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">## 关系运算符</span><br><span class="line">**`&gt;`,`&lt;`,`&gt;=`,`&lt;=`,`==`,`!=`**</span><br><span class="line">- 用于用来比较判断两个变量或常量的大小</span><br><span class="line">- 关系运算符是二元运算符，运算结果是 <span class="type">boolean</span> 型。当运算符对应的关系成立时，运算结果是 <span class="literal">true</span>，否则是 <span class="literal">false</span></span><br><span class="line">- 基本类型的变量、值不能和引用类型的变量、值进行比较</span><br><span class="line">- 如果两个引用类型之间没有父子继承关系，那么它们的变量不能使用 == 进行比较</span><br><span class="line">- 两个引用类型有父子继承关系只可以 == 比较 ；不能进行 &gt;,&lt;,&gt;=,&lt;=比较</span><br><span class="line">- <span class="type">boolean</span> 类型的变量、值不能与其他任意类型的变量、值进行比较</span><br><span class="line">- 关系运算符的优先级为：&gt;、&lt;、&gt;=、&lt;= 具有相同的优先级，并且高于具有相同优先级的 !=、==</span><br><span class="line"></span><br><span class="line">&gt; **`&gt;`,`&lt;`,`&gt;=`,`&lt;=`只支持左右两边操作数是数值类型**</span><br><span class="line">```java</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(a&gt;b);<span class="comment">//条件不成立,返回false</span></span><br><span class="line">System.out.println(a&gt;=b);<span class="comment">//条件不成立,返回false</span></span><br><span class="line">System.out.println(a&lt;b);<span class="comment">//条件成立,返回true</span></span><br><span class="line">System.out.println(a&lt;=b);<span class="comment">//条件成立,返回true</span></span><br><span class="line">System.out.println(a==b);<span class="comment">//条件不成立,返回false</span></span><br><span class="line">System.out.println(a!=b);<span class="comment">//条件成立,返回true</span></span><br></pre></td></tr></table></figure><blockquote><p><code>int型</code>和<code>char型</code>进行比较</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;<span class="comment">//(int)a为97</span></span><br><span class="line"><span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;<span class="comment">//(int)b为50</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a&gt;b);<span class="comment">//true</span></span><br><span class="line">System.out.println(a&lt;b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a==b);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(a&gt;c);<span class="comment">//true</span></span><br><span class="line">System.out.println(a&lt;c);<span class="comment">//false</span></span><br><span class="line">System.out.println(a==c);<span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">System.out.println(c&gt;b);<span class="comment">//false</span></span><br><span class="line">System.out.println(c&lt;b);<span class="comment">//false</span></span><br><span class="line">System.out.println(c==b);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li>与<code>&amp;&amp;</code>：两个值都为真，则结果为true</li><li>或<code>||</code>：两个值有一个值为true，则结果为true</li><li>非<code>!</code>：将值取反，如果是true则为false，如果是false则为true<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 与(and)  或(or) 非(取反)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a &amp;&amp; b&quot;</span>+(a &amp;&amp; b));  <span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">&quot;a || b:&quot;</span>+(a||b));   <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;!(a &amp;&amp; b):&quot;</span>+!(a&amp;&amp;b));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//短路运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);  <span class="comment">//因为c&lt;4为false，直接输出false，不执行c++</span></span><br><span class="line">System.out.println(d);  <span class="comment">//false</span></span><br><span class="line">System.out.println(c);  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c&gt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);  <span class="comment">//因为c&gt;4为true，需要判断c++&lt;4，执行c++</span></span><br><span class="line">System.out.println(d);  <span class="comment">//c++&lt;4为false,true&amp;&amp;false,输出为false</span></span><br><span class="line">System.out.println(c);  <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c&gt;<span class="number">4</span>)||(c++&lt;<span class="number">4</span>);  <span class="comment">//因为c&gt;4为true，直接输出true，不执行c++</span></span><br><span class="line">System.out.println(d);  <span class="comment">//true</span></span><br><span class="line">System.out.println(c);  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c&lt;<span class="number">4</span>)||(c++&gt;<span class="number">4</span>);  <span class="comment">//因为c&lt;4为false，需要判断c++&gt;4，执行c++</span></span><br><span class="line">System.out.println(d);  <span class="comment">//c++&gt;4为true,false||true,输出为true</span></span><br><span class="line">System.out.println(c);  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><code>&amp;</code>按位与操作，按二进制位进行”与”运算。运算规则：（有 0 则为 0，两个位都为1时，结果才为1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>&amp;<span class="number">0</span>=<span class="number">0</span>;   </span><br><span class="line"><span class="number">0</span>&amp;<span class="number">1</span>=<span class="number">0</span>;    </span><br><span class="line"><span class="number">1</span>&amp;<span class="number">0</span>=<span class="number">0</span>;     </span><br><span class="line"><span class="number">1</span>&amp;<span class="number">1</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><code>|</code>按位或运算符，按二进制位进行”或”运算。运算规则：（有 1 则为 1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>|<span class="number">0</span>=<span class="number">0</span>;   </span><br><span class="line"><span class="number">0</span>|<span class="number">1</span>=<span class="number">1</span>;   </span><br><span class="line"><span class="number">1</span>|<span class="number">0</span>=<span class="number">1</span>;    </span><br><span class="line"><span class="number">1</span>|<span class="number">1</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><code>^</code>异或运算符，按二进制位进行”异或”运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>^<span class="number">0</span>=<span class="number">0</span>;   </span><br><span class="line"><span class="number">0</span>^<span class="number">1</span>=<span class="number">1</span>;   </span><br><span class="line"><span class="number">1</span>^<span class="number">0</span>=<span class="number">1</span>;  </span><br><span class="line"><span class="number">1</span>^<span class="number">1</span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>~</code>取反运算符，按二进制位进行”取反”运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="number">1</span>=-<span class="number">2</span>;   </span><br><span class="line">~<span class="number">0</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><code>&lt;&lt;</code>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;&lt; 左移</span></span><br><span class="line"><span class="comment">//&lt;&lt;  *2</span></span><br><span class="line">System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);  <span class="comment">// 输出为16</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&gt;&gt;</code>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&gt;&gt; 右移</span></span><br><span class="line"><span class="comment">//&gt;&gt;  /2</span></span><br><span class="line">System.out.println(<span class="number">18</span>&gt;&gt;<span class="number">3</span>);<span class="comment">//输出为2 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&gt;&gt;&gt;</code> (无符号右移)  无符号右移，忽略符号位，空位都以0补齐<br>正数做&gt;&gt;&gt;运算的时候和&gt;&gt;是一样的。区别在于负数运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;16&gt;&gt;&gt;2运算的结果是 :&quot;</span>+((<span class="number">16</span>)&gt;&gt;&gt;<span class="number">2</span>));<span class="comment">//输出为4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-16&gt;&gt;&gt;2运算的结果是 :&quot;</span>+((-<span class="number">16</span>)&gt;&gt;&gt;<span class="number">2</span>));<span class="comment">//输出为1073741820</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A= <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B= <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line"></span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">A|B = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">A^B = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~B = <span class="number">1111</span> <span class="number">0010</span></span><br></pre></td></tr></table></figure><ul><li>在判断语句中，用 | 还是 ||，&amp; 还是 &amp;&amp;<ul><li>&amp; 和 &amp;&amp; 在判断语句中都可以实现“和”这个功能，不过区别在于 &amp; 两边都运算，而 &amp;&amp; 先算 &amp;&amp; 左侧，若左侧为 false 那么右侧就不运算了</li></ul></li></ul><h2 id="混合赋值运算符"><a href="#混合赋值运算符" class="headerlink" title="混合赋值运算符"></a>混合赋值运算符</h2><p><a href="https://www.cnblogs.com/niuyaomin/p/11732997.html">代码示例</a></p><table><thead><tr><th>名称</th><th>简写形式</th><th>含义</th></tr></thead><tbody><tr><td>赋值（Assignment）</td><td>x &#x3D; y</td><td>x &#x3D; y</td></tr><tr><td>加赋值（Addition assignment）</td><td>x +&#x3D; y</td><td>x &#x3D; x + y</td></tr><tr><td>减赋值（Subtraction assignment）</td><td>x -&#x3D; y</td><td>x &#x3D; x - y</td></tr><tr><td>乘赋值（Multiplication assigment）</td><td>x *&#x3D; y</td><td>x &#x3D; x * y</td></tr><tr><td>除赋值（Division assignment）</td><td>x &#x2F;&#x3D; y</td><td>x &#x3D; x &#x2F; y</td></tr><tr><td>模赋值（Remainder assignment）</td><td>x %&#x3D; y</td><td>x &#x3D; x % y</td></tr><tr><td>指数赋值（Exponentiation assignment）</td><td>x **&#x3D; y</td><td>x &#x3D; x ** y</td></tr><tr><td>左移赋值（Left shift assignment）</td><td>x &lt;&lt;&#x3D; y</td><td>x &#x3D; x &lt;&lt; y</td></tr><tr><td>右移赋值（Right shift assignment）</td><td>x &gt;&gt;&#x3D; y</td><td>x &#x3D; x &gt;&gt; y</td></tr><tr><td>无符号右移赋值（Unsigned right shift assignment）</td><td>x &gt;&gt;&gt;&#x3D; y</td><td>x &#x3D; x &gt;&gt;&gt; y</td></tr><tr><td>按位与赋值（Bitwise AND assignment）</td><td>x &amp;&#x3D; y</td><td>x &#x3D; x &amp; y</td></tr><tr><td>按位异或赋值（Bitwise XOR assignment）</td><td>x ^&#x3D; y</td><td>x &#x3D; x ^ y</td></tr><tr><td>按位或赋值（Bitwise OR assignment）</td><td>x |&#x3D; y</td><td>x &#x3D; x | y</td></tr></tbody></table><h2 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符 +"></a>字符串连接符 <code>+</code></h2><ul><li>做加法时若出现String型，就会将数值转换为Sting型，进行拼接</li></ul><p><a href="https://blog.csdn.net/NONINETEEN/article/details/83065151">示例</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符型变量初始值是字符</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 当输出语句中没有拼接“”时，字符型变量被赋值什么就输出什么；</span></span><br><span class="line"><span class="comment"> * 当“”前有2个及2个以上的字符型变量时，转化为int类型进行计算后输出；</span></span><br><span class="line"><span class="comment"> * 当“”前有1个或者0个字符型变量时，整个输出语句都转化成字符串类型后输出；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="comment">// 初始值是什么就输出什么</span></span><br><span class="line">System.out.println(ch1);    <span class="comment">// A</span></span><br><span class="line"><span class="comment">// 先转化为int类型，进行计算</span></span><br><span class="line">System.out.println(ch1+ ch2);                 <span class="comment">// 131</span></span><br><span class="line"><span class="comment">// 先转化为int类型，进行计算</span></span><br><span class="line">System.out.println(ch1+ ch2 + <span class="string">&quot;&quot;</span>);            <span class="comment">// 131</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号前先转化为int类型，进行计算，&quot;&quot;双引号后转化为字符串类型</span></span><br><span class="line">System.out.println(ch1+ ch2 + <span class="string">&quot;&quot;</span> + <span class="string">&#x27;C&#x27;</span>);      <span class="comment">// 131C</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号前后都转化为字符串</span></span><br><span class="line">System.out.println(ch1 + <span class="string">&quot;&quot;</span> + ch2 + <span class="string">&#x27;C&#x27;</span>);     <span class="comment">// ABC</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号前后都转化为字符串</span></span><br><span class="line">System.out.println(ch1 + <span class="string">&quot;&quot;</span> + ch2);           <span class="comment">// AB</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号后都转化为字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span> + ch1+ ch2);            <span class="comment">// AB</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符型变量初始值是字符</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 当输出语句中没有拼接“”时，字符型变量被赋值什么就输出什么；</span></span><br><span class="line"><span class="comment"> * 当“”前有2个及2个以上的字符型变量时，转化为int类型进行计算后输出；</span></span><br><span class="line"><span class="comment"> * 当“”前有1个或者0个字符型变量时，整个输出语句都转化成字符串类型后输出；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ch1 = <span class="number">65</span>;</span><br><span class="line">ch2 = <span class="number">66</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch3</span> <span class="operator">=</span> <span class="number">67</span>;</span><br><span class="line"><span class="comment">// 初始值什么就输出什么</span></span><br><span class="line">System.out.println(ch1);  <span class="comment">// 65</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号前先转化为int类型，进行计算后输出</span></span><br><span class="line">System.out.println(ch1 + ch2 + <span class="string">&quot;&quot;</span>);          <span class="comment">// 131</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号前转化为字符类型输出</span></span><br><span class="line">System.out.println( ch1 + <span class="string">&quot;&quot;</span>);               <span class="comment">// A</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号前先转化为int类型，进行计算，&quot;&quot;双引号后转化为字符串类型</span></span><br><span class="line">System.out.println(ch1 + ch2 + <span class="string">&quot;&quot;</span> + ch3);    <span class="comment">// 131C</span></span><br><span class="line"><span class="comment">// &quot;&quot;双引号前后都转化为字符串</span></span><br><span class="line">System.out.println(ch3 + <span class="string">&quot;&quot;</span> + ch1 + ch2);    <span class="comment">// CAB         </span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拼接对象是字符串时，结果和字符型变量初始值是字符相同的结果</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 当输出语句中没有拼接“”时，字符型变量被赋值什么就输出什么；</span></span><br><span class="line"><span class="comment"> * 当“”前有2个及2个以上的字符型变量时，转化为int类型进行计算后输出；</span></span><br><span class="line"><span class="comment"> * 当“”前有1个或者0个字符型变量时，整个输出语句都转化成字符串类型后输出；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">2</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">System.out.println(a + b + c );             <span class="comment">// 33</span></span><br><span class="line">System.out.println(c + a + b);              <span class="comment">// 312</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p><code>?:</code>:三元运算符<code>x?y:z</code>，运算规则是从右往左 ，如果 x &#x3D;&#x3D; true,则结果为 y, 否则结果为 z</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">grade</span> <span class="operator">=</span> score &lt; <span class="number">60</span>?<span class="string">&quot;不及格&quot;</span>:<span class="string">&quot;及格&quot;</span>; </span><br><span class="line"><span class="comment">//如果score&lt; 60,则结果为不及格, 否则结果为及格</span></span><br><span class="line">System.out.println(grade);   <span class="comment">//及格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////多级计算，从右往左</span></span><br><span class="line"><span class="comment">//op1 ? op2 : op3 ? op4 : op5</span></span><br><span class="line"><span class="comment">//优先计算op3 ? op4 : op5</span></span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">grade</span> <span class="operator">=</span> score &gt; <span class="number">80</span> ? <span class="string">&quot;优秀&quot;</span> : score &gt; <span class="number">60</span> ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line"><span class="comment">//先执行score &gt; 60 ? &quot;及格&quot; : &quot;不及格&quot;；判断是否及格，若&lt;=60直接输出不及格,</span></span><br><span class="line"><span class="comment">//否则执行score &gt; 80 ? &quot;优秀&quot; : &quot;及格&quot;进行判断</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_03:常量与变量</title>
    <link href="/2021/05/02/JavaBase-03/"/>
    <url>/2021/05/02/JavaBase-03/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：常量与变量</p><span id="more"></span><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>Java是强类型语言，每个变量都必须声明其类型</li><li>Java变量是程序的最基本存储单元，其要素包括变量名，变量类型和作用域</li><li>变量存在于内存中（程序结束后便会失效）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type varName [=value] [&#123;,varName[=value]&#125;];</span><br><span class="line"><span class="comment">//&lt;数据类型&gt; &lt;变量名&gt; = &lt;初始化值&gt;;  可以使用逗号隔开来声明多个同类型变量</span></span><br></pre></td></tr></table></figure><ul><li>注意事项<ul><li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li></ul></li></ul><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul><li><p>变量的作用域就是变量的有效范围,作用域是由大括号 {} 的位置决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;  <span class="comment">// 仅 x 变量可用</span></span><br><span class="line">   <span class="comment">// 变量 q 不在作用域内</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    &#123;<span class="comment">// 此大括号内 x 和 q 变量皆可用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">96</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量根据声明的位置可以分为成员变量和局部变量</p><ul><li>局部变量：在方法体中声明的变量叫做局部变量。<ul><li>局部变量若要使用需要初始化</li></ul></li><li>成员变量：在方法体外（类体之内）声明的变量，叫做成员变量。<ul><li>变量作为类的属性（值域）没有初始化时，JVM 会自动把它初始化为该类型变量的默认初始值。<ul><li>int 默认初始值为 0</li><li>float 默认初始值为 0.0f</li><li>long 默认初始值为 0，double 默认初始值为 0.0</li><li>boolean 默认初始值为 false</li><li>char 默认初始值为 0（ASCII 码）</li><li>所有对象（包括数组）默认初始值为 null。</li></ul></li></ul></li></ul></li><li><p>在不同的作用域中，变量名是可以相同的。在同一个作用域中，变量名不能重名。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">java01</span>&#123;</span><br><span class="line">     <span class="type">int</span> i=<span class="number">5</span>;<span class="comment">//成员变量</span></span><br><span class="line">     <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line">     <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         <span class="type">int</span> i=<span class="number">3</span>;<span class="comment">//局部变量   因为作用域不同，所以不会报错</span></span><br><span class="line">         System.out.println(i);<span class="comment">//输出是3，遵循就近原则</span></span><br><span class="line">         System.out.println(n);<span class="comment">//输出是10</span></span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <summary>成员变量和局部变量解释</summary><blockquote><p>作者：Winston<br>链接：<a href="https://www.zhihu.com/question/294221894/answer/493705474">https://www.zhihu.com/question/294221894/answer/493705474</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>这个概念我在学习之初也有些迷惑，专门整理过这一份文档，希望对你有用。</p><p>java中就没有全局变量这个概念，只分为成员变量和局部变量。</p><blockquote><p>成员变量：Static修饰成为类变量或静态变量，还有就是方法外的变量。生命周期与类相同。<br>局部变量：就是方法中的变量。生命周期就是再次方法中。</p></blockquote><p>但是，很多人学习都是先学习的C语言，C语言中存在全局变量这个概念，所以，大家对于Java中的成员变量有时候也称之为全局变量，同时也存在如下的一个约定俗成的小区别</p><p><strong>使用static 关键字进行声明的变量叫做全局变量</strong></p><p><strong>在函数外面定义的变量叫做成员变量</strong></p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ul><li>成员变量定义在类中，在整个类中都可以被访问。</li><li>成员变量随着对象的建立而建立，随着对象的消失而消失，存在于对象所在的堆内存中。</li><li>成员变量有默认初始化值。</li></ul><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><ul><li>局部变量只定义在局部范围内，如：函数内，语句内等，只在所属的区域有效。</li><li>局部变量存在于栈内存中，作用的范围结束，变量空间会自动释放。</li><li>局部变量没有默认初始化值</li></ul><blockquote><p>在使用变量时需要遵循的原则为：就近原则<br>首先在局部范围找，有就使用；接着在成员位置找。</p></blockquote><h2 id="静态变量（也叫做类变量，类属性）"><a href="#静态变量（也叫做类变量，类属性）" class="headerlink" title="静态变量（也叫做类变量，类属性）"></a>静态变量（也叫做类变量，类属性）</h2><p>由static修饰的变量称为静态变量，其实质上就是一个全局变量。如果某个内容是被所有对象所共&gt; 享，那么该内容就应该用静态修饰；没有被静态修饰的内容，其实是属于对象的特殊描述。</p><h2 id="成员变量和静态变量的区别"><a href="#成员变量和静态变量的区别" class="headerlink" title="成员变量和静态变量的区别"></a>成员变量和静态变量的区别</h2><p>1.两个变量的生命周期不同</p><ul><li>成员变量随着对象的创建而存在，随着对象被回收而释放。</li><li>静态变量随着类的加载而存在，随着类的消失而消失。</li></ul><p>2.调用方式不同</p><ul><li>成员变量只能被对象调用。</li><li>静态变量可以被对象调用，还可以被类名调用。</li></ul><p>3.别名不同</p><ul><li>成员变量也称为实例变量。</li><li>静态变量也称为类变量。</li></ul><p>4.数据存储位置不同</p><ul><li>成员变量存储在堆内存的对象中，所以也叫对象的特有数据。</li><li>静态变量数据存储在方法区（共享数据区）的静态区，所以也叫对象的共享数据。</li></ul></blockquote></details><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ul><li><p>初始化后不能再改变的值（被设定后在程序的运行过程中不允许被改变）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量名一般使用全大写字符</span></span><br><span class="line"><span class="keyword">final</span> 常量名 = 值;</span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_02:数据类型</title>
    <link href="/2021/05/01/JavaBase-02/"/>
    <url>/2021/05/01/JavaBase-02/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：数据类型</p><span id="more"></span><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><p><strong>强类型语言</strong></p><ul><li>要求变量的使用要严格符合规定，所有变量必须先定义后使用<ul><li>Java、.net、Python、C++</li></ul></li></ul></li><li><p><strong>弱类型语言</strong></p><ul><li>定义变量的时候不需要声明类型，一个变量可以存储所有类型的值并且不丢失数据<ul><li>PHP，JavaScript</li></ul></li></ul></li></ul><p><strong>Java的数据类型分两类：基本类型、引用类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[数据类型]--&gt;B1[基本数据类型]</span><br><span class="line">A--&gt;C1[引用类型]</span><br><span class="line">B1--&gt;B11[整数类型]</span><br><span class="line">B11--&gt;B111[byte]</span><br><span class="line">B11--&gt;B112[short]</span><br><span class="line">B11--&gt;B113[int]</span><br><span class="line">B11--&gt;B114[long]</span><br><span class="line">B1--&gt;B12[浮点类型]</span><br><span class="line">B12--&gt;B121[float]</span><br><span class="line">B12--&gt;B122[double]</span><br><span class="line">B1--&gt;B13[字符类型]</span><br><span class="line">B13--&gt;B131[char]</span><br><span class="line">B1--&gt;B14[布尔类型]</span><br><span class="line">B14--&gt;B141[true]</span><br><span class="line">B14--&gt;B142[false]</span><br><span class="line">C1--&gt;C11[类]</span><br><span class="line">C1--&gt;C12[接口]</span><br><span class="line">C1--&gt;C13[数组]</span><br></pre></td></tr></table></figure><h2 id="八大基本数据类型"><a href="#八大基本数据类型" class="headerlink" title="八大基本数据类型"></a>八大基本数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数类型</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">byteNumber</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//byte数据类型是8位(1个字节)，范围：(-128)～(127)</span></span><br><span class="line"><span class="type">short</span> <span class="variable">shortNumber</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//short数据类型是16位(2个字节)，范围(-32768)～(32767)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNumber</span> <span class="operator">=</span> <span class="number">30</span>;<span class="comment">//int数据类型是32位(4个字节)，范围(-2,147,483,648)～(2,147,483,647)</span></span><br><span class="line"><span class="type">long</span> <span class="variable">longNumber</span> <span class="operator">=</span> <span class="number">40L</span>;<span class="comment">//long数据类型是64位(8个字节)，范围(-9,223,372,036,854,775,808)～(9,223,372,036,854,775,807),末尾加L作为区分</span></span><br><span class="line"><span class="comment">//浮点类型</span></span><br><span class="line"><span class="type">float</span> <span class="variable">floatNumber</span> <span class="operator">=</span> <span class="number">3.4F</span>;<span class="comment">//单精度、32位(4个字节)，默认为double型，若要使用float需要在末尾加F</span></span><br><span class="line"><span class="type">double</span> <span class="variable">doubleNumber</span> <span class="operator">=</span> <span class="number">6.18</span>;<span class="comment">//双精度、64位(8个字节)</span></span><br><span class="line"><span class="comment">//字符类型</span></span><br><span class="line"><span class="type">char</span> <span class="variable">A1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;<span class="comment">//占2个字节，只能存一个字符：字母，数字，字，符号：&#x27;A&#x27;,&#x27;中&#x27;(String 不是关键字，是类)</span></span><br><span class="line"><span class="comment">//布尔类型</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">A1</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//占用1位，只有 true 和 false 两个值</span></span><br></pre></td></tr></table></figure><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p><strong>引用类型,是指除了基本的变量类型之外的所有类型</strong></p><ul><li>类</li><li>接口</li><li>数组</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul><li><p>整数进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">0b10</span>;       <span class="comment">//二进制0b0-1，满2进1        输出为2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>;        <span class="comment">//八进制0     0-7,满8进1         输出为8</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//十进制      0-9,满10进1        输出为10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">0x10</span>;       <span class="comment">//十六进制0x   0-9 A-F,满16进1    输出为16</span></span><br></pre></td></tr></table></figure></li><li><p>浮点数计算与比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>；</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>/<span class="number">10</span>；</span><br><span class="line">f==d 为 <span class="literal">false</span></span><br><span class="line"><span class="comment">//很多值浮点数都是采用其能够表示的离目标值最近的数来表示</span></span><br><span class="line"><span class="comment">//应避免使用浮点数进行比较，因为浮点数有舍入误差</span></span><br><span class="line"><span class="comment">//若是需要浮点计算，使用java.math.BigDecimal类</span></span><br></pre></td></tr></table></figure></li><li><p>字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有字符来自Unicode编码表，U0000-UFFFF</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;        <span class="comment">//输出为a</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;\u0061&#x27;</span>;   <span class="comment">//输出为a</span></span><br><span class="line"><span class="comment">//转义字符</span></span><br><span class="line">\t <span class="comment">//制表符</span></span><br><span class="line">\n <span class="comment">//换行</span></span><br></pre></td></tr></table></figure></li><li><p>布尔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;&#125;</span><br><span class="line"><span class="comment">//两个等值</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>由于Java是强类型语言，所以在计算时需要进行类型转换</li></ul><p><strong>强制类型转换 （类型）变量名   高精度→低精度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;<span class="comment">//强转时要注意支持的范围，会导致内存溢出</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">98</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">char</span>)c;</span><br><span class="line"><span class="comment">//不要随意使用强制转换，从高精度到低精度，隐含了精度损失问题</span></span><br></pre></td></tr></table></figure><p><strong>隐式转换（自动类型转换）    低精度→高精度</strong></p><ul><li><p>数值型数据的转换：byte→short→int→long→float→double。</p></li><li><p>字符型转换为整型：char→int。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">price1</span> <span class="operator">=</span> <span class="number">10.9f</span>; <span class="comment">// 定义牙膏的价格</span></span><br><span class="line"><span class="type">double</span> <span class="variable">price2</span> <span class="operator">=</span> <span class="number">5.8</span>; <span class="comment">// 定义面巾纸的价格</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 定义牙膏的数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">4</span>; <span class="comment">// 定义面巾纸的数量</span></span><br><span class="line"><span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> price1 * num1 + price2 * num2; <span class="comment">// 输出为44.99999923706055</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">float、int 和 double 三种数据类型参与运算，最后输出的结果为 double 类型的数据。这种转换一般称为“表达式中类型的自动提升”</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>注意点 </p><ol><li>不能对布尔值进行转换</li><li>不能把对向类型转换为不相干的类型</li><li>在高精度类型转低精度类型时需要强制转换</li><li>在转换时可能会遇到内存溢出或精度损失问题</li></ol></li></ul><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10_0000_0000</span>;<span class="comment">//java7特性，数字间可以用下划线分割;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">years</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">total1</span> <span class="operator">=</span> money*years;<span class="comment">//输出为-1474836480，计算时溢出了</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total2</span> <span class="operator">=</span> money*years;<span class="comment">//输出为-1474836480，因为先在int时计算，然后再转为long</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total3</span> <span class="operator">=</span> money*((<span class="type">long</span>)years);<span class="comment">//输出为20000000000，先将一个数强转为long</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBase_01：命名规则,注释,保留字（关键字）,标识符,包机制</title>
    <link href="/2021/05/01/JavaBase-01/"/>
    <url>/2021/05/01/JavaBase-01/</url>
    
    <content type="html"><![CDATA[<p>看各种视频教程出来的大杂烩笔记，对他人作用估计不大。内容：命名规则,注释,保留字（关键字）,标识符,包机制</p><span id="more"></span><h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><ul><li>类名使用驼峰命名法（Camel Case）：VelocityResponseWriter</li><li>包名使用小写：com.company.project.ui</li><li>变量使用首字母小写的驼峰命名法（Mixed Case）：studentName</li><li>常量使用大写:MAX_PARAMETER_COUNT &#x3D; 100</li><li>枚举类（enum class）采用驼峰命名法，枚举值（enum values）采用大写。</li><li>除了常量和枚举值以外，不要使用下划线’_’</li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="单行注释：只能注释一行"><a href="#单行注释：只能注释一行" class="headerlink" title="单行注释：只能注释一行"></a>单行注释：只能注释一行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是单行注释</span></span><br></pre></td></tr></table></figure><h2 id="多行注释：能注释多端"><a href="#多行注释：能注释多端" class="headerlink" title="多行注释：能注释多端"></a>多行注释：能注释多端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment">注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="文档注释（JavaDoc）"><a href="#文档注释（JavaDoc）" class="headerlink" title="文档注释（JavaDoc）"></a>文档注释（JavaDoc）</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这个类演示了文档注释</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Gusin</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.2</span></span><br><span class="line"><span class="comment">* 详见：https://www.runoob.com/java/java-documentation.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>常用参数信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ author 作者名</span><br><span class="line">@ version 版本号</span><br><span class="line">@ since 指明需要最早使用的jdk版本</span><br><span class="line">@ param 参数名</span><br><span class="line">@ <span class="keyword">return</span> 返回值情况</span><br><span class="line">@ <span class="keyword">throws</span> 异常抛出情况</span><br></pre></td></tr></table></figure><h2 id="如何生成Javadoc"><a href="#如何生成Javadoc" class="headerlink" title="如何生成Javadoc"></a>如何生成Javadoc</h2><ul><li>javadoc命令可以用来生成自己的API文档</li><li><a href="https://docs.oracle.com/en/java/javase/index.html">在线 API 文档</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/">Java 8 API Docs</a></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.blue.base;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> blue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Doc</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> blue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">text</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用命令行生成 <code>javadoc [选项] [软件包名称] [源文件]</code></li></ul><blockquote><p>命令格式： javadoc -d 文档存储目录 -encoding utf-8 -charset utf-8 Xxx.java<br>参数说明：</p><ul><li>-d 指定API文档的输出目录，默认是当前目录。建议总是指定该参数。</li><li>-encoding UTF-8 表示你的源代码（含有符合 JavaDoc 标准的注释）是基于 UTF-8 编码的，以免处理过程中出现中文等非英语字符乱码</li><li>-charset UTF-8 表示在处理并生成 JavaDoc 超文本时使用的字符集也是以 UTF-8 为编码</li><li>注意： 如果此文件夹内有多个.java文件需要生成，我们可以在指定.java文件的时候使用*.java。这里utf-8编码相关是指定文档的编码字符集，如果与项目或系统编码不一致可能会造成生成的doc文档乱码。</li></ul></blockquote><ul><li><a href="https://blog.csdn.net/future_ll/article/details/104100098">使用IDEA生成</a></li></ul><h1 id="保留字（关键字）（待定，未整理完）"><a href="#保留字（关键字）（待定，未整理完）" class="headerlink" title="保留字（关键字）（待定，未整理完）"></a>保留字（关键字）（待定，未整理完）</h1><p>被Java语言赋予了特定含义的单词<br>语言中已经定义过的关键字，不能再将这些字作为变量名或过程名使用</p><table><thead><tr><th>关键字（黑马）</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>用于定义数据类型的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>class</td><td>interface</td><td>byte</td><td>short</td><td>int</td></tr><tr><td>long</td><td>float</td><td>double</td><td>char</td><td>boolean</td></tr><tr><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>用于定义数据类型值的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>true</td><td>false</td><td>null</td><td>-</td><td>-</td></tr><tr><td>用于定义流程控制的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>if</td><td>else</td><td>switch</td><td>case</td><td>default</td></tr><tr><td>while</td><td>do</td><td>for</td><td>break</td><td>continue</td></tr><tr><td>return</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>用于定义访问权限修饰符的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>private</td><td>protected</td><td>public</td><td>-</td><td>-</td></tr><tr><td>用于定义类,函数,变量修饰符的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>abstract</td><td>final</td><td>static</td><td>synchronized</td><td></td></tr><tr><td>用于定义类与类之间关系的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>extends</td><td>implements</td><td>-</td><td>-</td><td>-</td></tr><tr><td>用于定义建立实例及引用实例,判断实例的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>new</td><td>this</td><td>super</td><td>instanceof</td><td>-</td></tr><tr><td>用于异常处理的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>try</td><td>catch</td><td>finally</td><td>throw</td><td>throws</td></tr><tr><td>用于包的关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>package</td><td>import</td><td>-</td><td>-</td><td>-</td></tr><tr><td>其他修饰符关键字</td><td></td><td></td><td></td><td></td></tr><tr><td>native</td><td>stricttp</td><td>transient</td><td>volatile</td><td>assert</td></tr></tbody></table><p><strong>自行整理</strong></p><table><thead><tr><th>访问控制</th><th>类、接口、方法、变量、代码块修饰符</th><th>程序控制</th><th>错误处理</th><th>基本数据类型</th><th>变量引用</th><th>包相关</th></tr></thead><tbody><tr><td>private</td><td>class</td><td>if</td><td>catch</td><td>byte</td><td>new</td><td>import</td></tr><tr><td>default</td><td>abstract</td><td>else</td><td>try</td><td>char</td><td>super</td><td>package</td></tr><tr><td>protected</td><td>extends</td><td>while</td><td>finally</td><td>boolean</td><td>this</td><td>-</td></tr><tr><td>public</td><td>implements</td><td>for</td><td>throw</td><td>short</td><td>void</td><td>-</td></tr><tr><td>-</td><td>interface</td><td>switch</td><td>throws</td><td>int</td><td>-</td><td>-</td></tr><tr><td>-</td><td>final</td><td>case</td><td>-</td><td>float</td><td>-</td><td>-</td></tr><tr><td>-</td><td>strictfp</td><td>default</td><td>-</td><td>long</td><td>-</td><td>-</td></tr><tr><td>-</td><td>static</td><td>do</td><td>-</td><td>double</td><td>-</td><td>-</td></tr><tr><td>-</td><td>synchronized</td><td>break</td><td>-</td><td>void</td><td>-</td><td>-</td></tr><tr><td>-</td><td>transient</td><td>continue</td><td>-</td><td>null</td><td>-</td><td>-</td></tr><tr><td>-</td><td>volatile</td><td>return</td><td>-</td><td>true</td><td>-</td><td>-</td></tr><tr><td>-</td><td>native</td><td>instanceof</td><td>-</td><td>false</td><td>-</td><td>-</td></tr><tr><td>-</td><td>enum</td><td>assert</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p><a href="https://www.w3schools.com/java/java_ref_keywords.asp">Java Keywords</a></p><details>    <summary>Java Keywords</summary><table>   <tr>      <td>Keyword</td>      <td>Description</td>   </tr>   <tr>      <td>abstract</td>      <td>A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from)</td>   </tr>   <tr>      <td>assert</td>      <td>For debugging</td>   </tr>   <tr>      <td>boolean</td>      <td>A data type that can only store true and false values</td>   </tr>   <tr>      <td>break</td>      <td>Breaks out of a loop or a switch block</td>   </tr>   <tr>      <td>byte</td>      <td>A data type that can store whole numbers from -128 and 127</td>   </tr>   <tr>      <td>case</td>      <td>Marks a block of code in switch statements</td>   </tr>   <tr>      <td>catch</td>      <td>Catches exceptions generated by try statements</td>   </tr>   <tr>      <td>char</td>      <td>A data type that is used to store a single character</td>   </tr>   <tr>      <td>class</td>      <td>Defines a class</td>   </tr>   <tr>      <td>continue</td>      <td>Continues to the next iteration of a loop</td>   </tr>   <tr>      <td>const</td>      <td>Defines a constant. Not in use - use final instead</td>   </tr>   <tr>      <td>default</td>      <td>Specifies the default block of code in a switch statement</td>   </tr>   <tr>      <td>do</td>      <td>Used together with while to create a do-while loop</td>   </tr>   <tr>      <td>double</td>      <td>A data type that can store whole numbers from 1.7e−308 to 1.7e+308</td>   </tr>   <tr>      <td>else</td>      <td>Used in conditional statements</td>   </tr>   <tr>      <td>enum</td>      <td>Declares an enumerated (unchangeable) type</td>   </tr>   <tr>      <td>exports</td>      <td>Exports a package with a module. New in Java 9</td>   </tr>   <tr>      <td>extends</td>      <td>Extends a class (indicates that a class is inherited from another class)</td>   </tr>   <tr>      <td>final</td>      <td>A non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override)</td>   </tr>   <tr>      <td>finally</td>      <td>Used with exceptions, a block of code that will be executed no matter if there is an exception or not</td>   </tr>   <tr>      <td>float</td>      <td>A data type that can store whole numbers from 3.4e−038 to 3.4e+038</td>   </tr>   <tr>      <td>for</td>      <td>Create a for loop</td>   </tr>   <tr>      <td>goto</td>      <td>Not in use, and has no function</td>   </tr>   <tr>      <td>if</td>      <td>Makes a conditional statement</td>   </tr>   <tr>      <td>implements</td>      <td>Implements an interface</td>   </tr>   <tr>      <td>import</td>      <td>Used to import a package, class or interface</td>   </tr>   <tr>      <td>instanceof</td>      <td>Checks whether an object is an instance of a specific class or an interface</td>   </tr>   <tr>      <td>int</td>      <td>A data type that can store whole numbers from -2147483648 to 2147483647</td>   </tr>   <tr>      <td>interface</td>      <td>Used to declare a special type of class that only contains abstract methods</td>   </tr>   <tr>      <td>long</td>      <td>A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808</td>   </tr>   <tr>      <td>module</td>      <td>Declares a module. New in Java 9</td>   </tr>   <tr>      <td>native</td>      <td>Specifies that a method is not implemented in the same Java source file (but in another language)</td>   </tr>   <tr>      <td>new</td>      <td>Creates new objects</td>   </tr>   <tr>      <td>package</td>      <td>Declares a package</td>   </tr>   <tr>      <td>private</td>      <td>An access modifier used for attributes, methods and constructors, making them only accessible within the declared class</td>   </tr>   <tr>      <td>protected</td>      <td>An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses</td>   </tr>   <tr>      <td>public</td>      <td>An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class</td>   </tr>   <tr>      <td>requires</td>      <td>Specifies required libraries inside a module. New in Java 9</td>   </tr>   <tr>      <td>return</td>      <td>Finished the execution of a method, and can be used to return a value from a method</td>   </tr>   <tr>      <td>short</td>      <td>A data type that can store whole numbers from -32768 to 32767</td>   </tr>   <tr>      <td>static</td>      <td>A non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class</td>   </tr>   <tr>      <td>strictfp</td>      <td>Restrict the precision and rounding of floating point calculations</td>   </tr>   <tr>      <td>super</td>      <td>Refers to superclass (parent) objects</td>   </tr>   <tr>      <td>switch</td>      <td>Selects one of many code blocks to be executed</td>   </tr>   <tr>      <td>synchronized</td>      <td>A non-access modifier, which specifies that methods can only be accessed by one thread at a time</td>   </tr>   <tr>      <td>this</td>      <td>Refers to the current object in a method or constructor</td>   </tr>   <tr>      <td>throw</td>      <td>Creates a custom error</td>   </tr>   <tr>      <td>throws</td>      <td>Indicates what exceptions may be thrown by a method</td>   </tr>   <tr>      <td>transient</td>      <td>A non-accesss modifier, which specifies that an attribute is not part of an object's persistent state</td>   </tr>   <tr>      <td>try</td>      <td>Creates a try...catch statement</td>   </tr>   <tr>      <td>var</td>      <td>Declares a variable. New in Java 10</td>   </tr>   <tr>      <td>void</td>      <td>Specifies that a method should not have a return value</td>   </tr>   <tr>      <td>volatile</td>      <td>Indicates that an attribute is not cached thread-locally, and is always read from the "main memory"</td>   </tr>   <tr>      <td>while</td>      <td>Creates a while loop</td>   </tr>   </tr></table></details><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul><li>所有标识符的首字母只能由大小写字母（A-Z或a-z）、下划线（_）或美元符号（$）组成</li><li>后续字母可以用数字（0-9）、大小写字母（A-Z或a-z）、下划线（_）或美元符号（$）组合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///合法的标识符</span></span><br><span class="line">Man、man、$man、_man、$_man</span><br><span class="line"><span class="comment">//非法的标识符</span></span><br><span class="line">123abc、-sad、#dsf、!SFS</span><br></pre></td></tr></table></figure><ul><li><p>不能使用关键字作为变量名或方法名</p></li><li><p>标识符大小写敏感</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">Man</span> <span class="operator">=</span> <span class="string">&quot;112&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">man</span> <span class="operator">=</span> <span class="string">&quot;112&quot;</span>;</span><br><span class="line"><span class="comment">////不是一个变量</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><ul><li>语法格式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3...]];</span><br></pre></td></tr></table></figure></li><li>一般利用域名倒置作为包名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gusincx.base</span><br></pre></td></tr></table></figure></li><li>为了能使用某一个包中的成员，我们需要在Java程序中使用<code>import</code>语句导入该包。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkg1[.pkg2[.pkg3...]].(classname|*);</span><br></pre></td></tr></table></figure></li><li>包的本质就是文件夹<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;;   <span class="comment">//导入io包下所有的类</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello,Hexo</title>
    <link href="/2021/05/01/helloHexo/"/>
    <url>/2021/05/01/helloHexo/</url>
    
    <content type="html"><![CDATA[<p>又 <del>滚回</del> 回滚 到 Hexo 了</p><!-- more --><blockquote><p> <code>Hugo</code> 无需依赖 很舒服  <del>就是插件和教程有亿点点少</del>。<br>加上 <del>乱改</del> 魔改 模板 改崩了，还是回到<code>Hexo</code>吧<br>当又一次为<code>npm </code>感到烦躁时，或许会试试Jekyll吧？</p></blockquote><p>至于以前写的流水账。。。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/01/hello-world/"/>
    <url>/2021/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
